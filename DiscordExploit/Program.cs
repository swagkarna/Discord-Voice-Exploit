using Discord;
using Discord.Gateway;
using Discord.Voice;
using System;
using System.Threading;


namespace DiscordExploit
{
    class Program
    {
        static void Main()
        {
            Login();
        }

        public static void Login()
        {
            // SocketClient got more features than a normal Client however if you want to do simple stuff a normal Client will do just fine.
            // To login with a SocketClient you can't just call the token like a normal Client so youll have to do it like ive done it in this source code.
            DiscordSocketClient client = new DiscordSocketClient();

            // This is a normal client which can hold a token to login straight away. That isn't possible with a SocketClient tho.
            //DiscordClient client2 = new DiscordClient("You can put in the token here to login straight away.");

            // This is used to join a server using its invite code. this only works with a normal Client and not a socket client.
            // You can do way more than just JoinGuild I suggest that you type in client with a dot behind to see all the options you can do.
            //client.JoinGuild("4hxFyE");

            // This is a event for OnLoggedIn so when the token successfully logs in its gonna start the events listed under the Client_OnLoggedIn method.
            client.OnLoggedIn += Client_OnLoggedIn;

            // An example of another event trigger could be a CommandHandler so that the bot interacts on commands only if they start with !.
            //client.CreateCommandHandler("!");

            #region
            // This is how we login using a SocketClient obviously you could just set the token client.Login(tokenhere).
            // But since most accounts gets yeeted each now and then ive decided to make it into a ReadLine.
            // So that you can use any token you want without compiling all the time.
            Console.Write("Token: ");
            // This takes the users input and stores it into a string to then try to login with it afterwards.
            string clientToken = Console.ReadLine();
            Console.WriteLine(string.Empty);
            client.Login(clientToken);
            #endregion
            Thread.Sleep(-1);
        }

        public static void Client_OnLoggedIn(DiscordSocketClient client, LoginEventArgs args)
        {
            // This will be triggered upon successfull login.
            Console.WriteLine("Logged in!");

            // If you really wanted to you could just change these values to some guildID and channelID.
            // However then if you were to use this exploit in another discord server.
            // You would have to recompile each time so ive made it like this where its gonna ask for the ID's.
            ulong guildID = 0;
            ulong channelID = 0;

            // File extensions that ive tested and that are working | mp3, wav, mp4 and probably others.
            // No mp4 doesn't crash anything even tho its a video its just gonna play the audio only so its still gonna work.
            Console.WriteLine(@"Input sound path example: C:\Users\Manono\Downloads\sound.mp3");

            Console.Write("Enter your song path: ");
            // This will store the filepath to the sound in a string that afterwards gets called.
            // You could also set this over the source like guildID and channelID but you would have to recompile to change sound.
            string soundLocation =  Console.ReadLine();
            Console.WriteLine(string.Empty);

            Console.Write("Enter guildID: ");
            // Just stores guildID into a string variable that gets called afterwards in the exploit.
            guildID = Convert.ToUInt64(Console.ReadLine());
            Console.WriteLine(string.Empty);

            Console.Write("Enter channelID: ");
            // Just stores channelID into a string variable that gets called afterwards in the exploit.
            channelID = Convert.ToUInt64(Console.ReadLine());
            Console.WriteLine(string.Empty);

            // This will get the sound from the sound location that the user typed in.
            byte[] sound = DiscordVoiceUtils.ReadFromFile(soundLocation);

            // This will start the exploit making the account join a voice channel depending on the guildID and channelID.
            // the true and false is the fun part of this whole exploit thing.
            // If you were to set muted to true (the first bool option) then the bot will join with the muted icon however it will still play the sound.
            // Same goes for the second bool option which is deafened if thats true the bot will join while deafened and still play the sound.
            // So if you were to troll people in a big voice call you could just turn both of these to true.
            // That would make the bot join the voice channel while being both muted and deafened but it would still play the sounds so you could earrape the voice call.
            var session = client.JoinVoiceChannel(guildID, channelID, true, false);
            session.OnConnected += (s, a) =>
            {
                Console.WriteLine("Speaking");
                // This will start the sound playing once the account joins the voice chat.
                var stream = session.CreateStream(64000);

                // This is also somewhat funny if you change Soundshare to Microphone its gonna show that you speak with the green circle.
                // If its not speaking its just not gonna speak at all
                // And if its on Soundshare its gonna use discord's screenshare option to output audio so that you wont have a green circle when speaking.
                // This is fun to do in voice calls with friends as you can just make the bot account join unmuted and undeafened but with Soundshare sound
                // So it won't show a green circle but still earrape your friends etc.
                session.SetSpeakingState(DiscordVoiceSpeakingState.Soundshare);
            };
        }
    }
}